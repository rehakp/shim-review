--- a/grub-core/term/efi/console.c	2020-10-06 09:30:30.413312393 +0200
+++ b/grub-core/term/efi/console.c	2020-10-14 15:09:59.030973093 +0200
@@ -23,6 +23,7 @@
 #include <grub/efi/efi.h>
 #include <grub/efi/api.h>
 #include <grub/efi/console.h>
+#include <grub/env.h>
 
 typedef enum {
     GRUB_TEXT_MODE_UNDEFINED = -1,
@@ -251,6 +252,10 @@ grub_console_read_key_stroke (
     if (status != GRUB_EFI_SUCCESS)
       return GRUB_ERR_EOF;
 
+    grub_dprintf ("eficonsole", "KSS:KTS:ScanCode:UnicodeChar = %08x:%02x:%04x:%04x\n",
+		  key_data.key_state.key_shift_state, key_data.key_state.key_toggle_state,
+		  key_data.key.scan_code, key_data.key.unicode_char);
+
     key = grub_efi_translate_key (key_data.key);
   }
 
@@ -299,6 +304,7 @@ grub_console_getkeystatus (struct grub_t
 {
   grub_efi_key_data_t key_data;
   grub_efi_uint32_t kss;
+  grub_efi_key_toggle_state_t kts;
   int key, mods = 0;
 
   if (grub_efi_is_finished)
@@ -324,6 +330,17 @@ grub_console_getkeystatus (struct grub_t
         mods |= GRUB_TERM_STATUS_RCTRL;
     }
 
+  kts = key_data.key_state.key_toggle_state;
+  if (kts & GRUB_EFI_TOGGLE_STATE_VALID)
+    {
+      if (kts & GRUB_EFI_SCROLL_LOCK_ACTIVE)
+	mods |= GRUB_TERM_STATUS_SCROLL;
+      if (kts & GRUB_EFI_NUM_LOCK_ACTIVE)
+	mods |= GRUB_TERM_STATUS_NUM;
+      if (kts & GRUB_EFI_CAPS_LOCK_ACTIVE)
+	mods |= GRUB_TERM_STATUS_CAPS;
+    }
+
   return mods;
 }
 
@@ -344,6 +361,15 @@ grub_efi_console_input_init (struct grub
 				      &text_input_ex_guid,
 				      GRUB_EFI_OPEN_PROTOCOL_GET_PROTOCOL);
   term->data = (void *)text_input;
+  if (term->data)
+    {
+      grub_env_set ("eficonsole_protocol_ex", "y");
+    }
+  else
+    {
+      grub_env_set ("eficonsole_protocol_ex", "n");
+    }
+  grub_env_export ("eficonsole_protocol_ex");
 
   return 0;
 }
